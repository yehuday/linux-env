" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
set incsearch		" Incremental search
set hlsearch            " Higlight seatch results
set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)
set paste

map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

set nocompatible                        " vim defaults, not vi!
filetype on                             " automatic file type detection

set ls=2

set wildmenu
set wildmode=list:longest

" filetype func off
filetype off

" initialize vundle
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
"8a8 6d start- all plugins below

Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-scripts/OmniCppComplete'
Plugin 'vim-scripts/c.vim'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'ap/vim-buftabline'
Plugin 'vim-scripts/Conque-GDB'
Plugin 'jreybert/vimagit'
Plugin 'tpope/vim-fugitive'
Plugin 'hari-rangarajan/CCTree'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'vim-scripts/ifdef-highlighting'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-syntastic/syntastic'
Plugin 'will133/vim-dirdiff'
"Plugin 'vim-scripts/CCTree'
"Plugin 'bling/vim-bufferline'
"Plugin 'vim-scripts/vim-cpp-enhanced-highlight'
"Plugin 'vundle/cscope.vim'
"Plugin 'shougo/deoplete.nvim'

" stop - all plugins above
call vundle#end()

" filetype func on
filetype plugin indent on


" pr√©requis tags
set nocp
filetype plugin on      

" configure tags - add additional tags here or comment out not-used ones      
"set tags+=~/.vim/tags/stl      
"set tags+=~/.vim/tags/gl      
"set tags+=~/.vim/tags/sdl      
"set tags+=~/.vim/tags/qt4      

" build tags of your own project with CTRL+F12      
"map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>      
noremap <F12> :!ctags -R --fields=+iaS --extra=+q .<cr>      
inoremap <F12> <Esc>:!ctags -R --fields=+iaS --extra=+q .<cr>      
nnoremap <F10> :!cscope -Rbu<CR>:cs reset<CR>

" F2 run bash commands
nnoremap <F2> :!
" F3 to go back to previous buffer
nnoremap <F3> :b#<CR>
" use F4 to select a buffer
nnoremap <F4> :buffers<CR>:buffer<Space>

" F5 Open NERDTree
nnoremap <F5> :NERDTree<CR>

" F6 move to next buffer
nnoremap <F6> :NERDTreeClose<CR>


" F7/F8 jump to prev/next error
nnoremap <F7> :cprevious<CR>
nnoremap <F8> :cnext<CR>

nnoremap <F9> :wincmd w<CR>

" Copy word under cursor
nnoremap <C-d> <ESC>yiw
" Paste word in buffer instead of word under cursor
nnoremap <C-f> <ESC>ciw<C-r>0<ESC>

" Move to prev tag
nnoremap <C-a> <ESC>:tprev<CR>
" Move to next tag
nnoremap <C-s> <ESC>:tnext<CR>

" Warn on lines above 100 charecters
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

match Error /\%101v.\+/
match Error /\s\+$/

" OmniCppComplete      
let OmniCpp_NamespaceSearch = 1      
let OmniCpp_GlobalScopeSearch = 1      
let OmniCpp_ShowAccess = 1      
let OmniCpp_MayCompleteDot = 1      
let OmniCpp_MayCompleteArrow = 1      
let OmniCpp_MayCompleteScope = 1      
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]      

" automatically open and close the popup menu / preview window      
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif      
set completeopt=menuone,menu,longest,preview

set background=dark

source ~/.vim/bundle/cscope/plugin/cscope_maps.vim

" Set whitespace coloring
highlight ExtraWhitespace ctermbg=red guibg=red
" Show trailing whitespace and spaces before a tab:
match ExtraWhitespace /\s\+$\| \+\ze\t/

" Setup spell checker only for git commit windows
autocmd FileType gitcommit setlocal spell

" ctrl-p settings
let g:ctrlp_max_files = 0
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git)$',
    \ 'file': '\v\.(o|d|orig|rej|patch|deb|gcno|gcda)$',
    \ }

if has('persistent_undo')      "check if your vim version supports it
  set undofile                 "turn on the feature
  set undodir=$HOME/.vim/undo  "directory where the undo files will be stored
  set undolevels=1000
  set undoreload=1000
endif
